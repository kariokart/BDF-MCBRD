<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.1.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="completedURL" valType="str"/>
    <Param name="Completion URL" updates="None" val="https://www.pavlovia.org" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="incompleteURL" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1536, 864]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="white" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="BDF MCBRD" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="#import all libraries for experiment&amp;#10;from PIL import Image, ImageDraw&amp;#10;import win32api&amp;#10;&amp;#10;#get window size&amp;#10;xwin, ywin = win.size&amp;#10;&amp;#10;#find image location on screen&amp;#10;#(image is displayed at 1024x768 at the center&amp;#10;#of the screen, regardless of individual screen size)&amp;#10;#image dimensions start at the top left corner&amp;#10;imageStartX = (xwin / 2) - 512&amp;#10;imageStartY = (ywin / 2) - 384&amp;#10;#imageStartX = int(imageStartX)&amp;#10;#imageStartY = int(imageStartY)&amp;#10;&amp;#10;#write participant's screen dimensions,&amp;#10;#the starting location of the 1024x768 BDF image,&amp;#10;#and column names at beginning of output file&amp;#10;#   note, if there is already content in this output file,&amp;#10;#   this code will begin writing after the previous content.&amp;#10;#   multiple runs can be viewed in the same file.&amp;#10;outfile = open('FixatedLocations.txt','a')&amp;#10;outfile.write('BEGIN EXPERIMENT')&amp;#10;outfile.write('\nWindow dimensions: ')&amp;#10;outfile.write('%s  %s\n' % (str(xwin),str(ywin)))&amp;#10;outfile.write('Image top left corner: ')&amp;#10;outfile.write('%s  %s\n' % (str(imageStartX),str(imageStartY)))&amp;#10;outfile.write('Begin mouse recording... \n')&amp;#10;#Column names:&amp;#10;#Img = image number&amp;#10;#OriX, OriY = original mouse position on the participant's screen&amp;#10;#   note, positions outside BDF edges displayed as the edge value,&amp;#10;#   as the nonblurred circle will not go past the image dimensions.&amp;#10;#ImgX, ImgY = mouse position relative to the 1024x768 dimensions&amp;#10;#   of the BDF image. Consider these dimensions standardized across&amp;#10;#   participants.&amp;#10;outfile.write('Img\tOriX\tOriY\tImgX\tImgY\n')&amp;#10;outfile.close()" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="mouseVis = new event.Mouse({&quot;win&quot;: win});&amp;#10;mouseVis.setVisible(false);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="mouseVis = event.Mouse(win=win)&amp;#10;mouseVis.setVisible(False)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="    &amp;#10;#get mouse position&amp;#10;mousePos = win32api.GetCursorPos()&amp;#10;xpixel = mousePos[0]&amp;#10;ypixel = mousePos[1]&amp;#10;&amp;#10;#open output file&amp;#10;outfile = open('FixatedLocations.txt','a')&amp;#10;&amp;#10;#limit mouse location reporting to image dimensions&amp;#10;if xpixel &lt; imageStartX:&amp;#10;    xpixel = imageStartX&amp;#10;#    outfile.write('out of bounds')&amp;#10;elif xpixel &gt; (imageStartX + 1024):&amp;#10;    xpixel = (imageStartX + 1024)&amp;#10;#    outfile.write('out of bounds')&amp;#10;if ypixel &lt; imageStartY:&amp;#10;    ypixel = imageStartY&amp;#10;#    outfile.write('out of bounds')&amp;#10;elif ypixel &gt; (imageStartY + 768):&amp;#10;    ypixel = (imageStartY + 768)&amp;#10;#    outfile.write('out of bounds')&amp;#10;&amp;#10;#write image number to output file&amp;#10;imageNumber = OriginalImage.replace('images/','')&amp;#10;imageNumber = imageNumber.replace('.bmp','')&amp;#10;outfile.write(imageNumber)&amp;#10;#write mouse location on participant's screen&amp;#10;outfile.write('\t%s\t%s\t' % (str(xpixel),str(ypixel)))&amp;#10;&amp;#10;#open the input image as numpy array, convert to RGB&amp;#10;img=Image.open(OriginalImage).convert(&quot;RGB&quot;)&amp;#10;npImage=np.array(img)&amp;#10;&amp;#10;#create same size alpha layer with circle&amp;#10;alpha = Image.new('L', img.size,0)&amp;#10;draw = ImageDraw.Draw(alpha)&amp;#10;&amp;#10;#determine mouse location relative to image dimensions,&amp;#10;#and use these to display nonblurred circle&amp;#10;xpixelOnImage = xpixel- imageStartX&amp;#10;ypixelOnImage = ypixel- imageStartY&amp;#10;#output the values used to display nonblurred circle&amp;#10;outfile.write('%s\t%s\n' % (str(xpixelOnImage),str(ypixelOnImage)))&amp;#10;#draw circle on alpha layer, using pixel locations -/+ the radius&amp;#10;#of the circle&amp;#10;draw.pieslice([(xpixelOnImage - 50),(ypixelOnImage -50),(xpixelOnImage +50),(ypixelOnImage +50)],0,360,fill=255)&amp;#10;#close output file&amp;#10;outfile.close()&amp;#10;&amp;#10;#convert alpha Image to numpy array&amp;#10;npAlpha=np.array(alpha)&amp;#10;&amp;#10;#add alpha layer to RGB&amp;#10;npImage=np.dstack((npImage,npAlpha))&amp;#10;&amp;#10;#save with alpha&amp;#10;Image.fromarray(npImage).save('images/result.png')" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <MouseComponent name="mouse">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="never" valType="str"/>
        <Param name="name" updates="None" val="mouse" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="every frame" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="routine" valType="str"/>
      </MouseComponent>
      <ImageComponent name="imageStimulus">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every frame" val="$BlurredImage" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="imageStimulus" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
      </ImageComponent>
      <ImageComponent name="imageAperture">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every frame" val="images/result.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="imageAperture" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every frame" val="(0,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Instructions">
      <TextComponent name="Instruction">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Times New Roman" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.035" valType="code"/>
        <Param name="name" updates="None" val="Instruction" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Thanks for participating!&amp;#10;&amp;#10;In this study, you are going to be presented with six picture stories. The pictures in each story will be shown in either a coherent or random order. Use your mouse to reveal detailed information in each image.&amp;#10;&amp;#10;Your task will be to comprehend each of these picture stories to the best of your ability. When you are ready to view the first picture story, press the [Spacebar] on the keyboard.&amp;#10;&amp;#10;As soon as you are ready to advance to the next picture in the story, press the [Spacebar]. At the end of the picture story, you will be asked to write a summary of the story that you were presented with. When you are done writing your summary, press the [Enter] button on the keyboard. This procedure will be repeated for the remaining picture stories.&amp;#10;&amp;#10;Press the [Spacebar] to begin." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <MouseComponent name="mouse_2">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="any click" valType="str"/>
        <Param name="name" updates="None" val="mouse_2" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="mouseVis = new event.Mouse({&quot;win&quot;: win});&amp;#10;mouseVis.setVisible(false);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="mouseVis = event.Mouse(win=win)&amp;#10;mouseVis.setVisible(False)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="End">
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Times New Roman" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="All done! Thank you!&amp;#10;&amp;#10;Press [Space] to end." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <MouseComponent name="mouse_3">
        <Param name="clickable" updates="constant" val="" valType="code"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="any click" valType="str"/>
        <Param name="name" updates="None" val="mouse_3" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'y','n','left','right','space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code_3">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="mouseVis = event.Mouse(win=win)&amp;#10;mouseVis.setVisible(False)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="&amp;#10;## script to send datafile to aws s3 bucket via python and the boto3 library&amp;#10;# not guaranteed to work for PsychoPy because I don't know if PsychoPy&amp;#10;# supports the boto3 library&amp;#10;import boto3&amp;#10;#from botocore.exceptions import NoCredentialsError&amp;#10;&amp;#10;import pandas as pd&amp;#10;import csv&amp;#10;&amp;#10;## S3 bucket access keys&amp;#10;# good practice to not have this in the compiled program for security&amp;#10;# purposes, but it's fine if no other way&amp;#10;ACCESS_KEY = 'AKIAI2FTKYJ3AZNWGQNA'&amp;#10;SECRET_KEY = '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'&amp;#10;&amp;#10;&amp;#10;## Second method - probably better because it dynamically creates&amp;#10;# a datafile and can save to specific directory in the bucket&amp;#10;#from io import StringIO&amp;#10;region_name = 'us-east-2'&amp;#10;s3 = boto3.client(&quot;s3&quot;,\&amp;#10;                 region_name = region_name,\&amp;#10;                 aws_access_key_id=ACCESS_KEY,\&amp;#10;                 aws_secret_access_key=SECRET_KEY)&amp;#10;#csv_buf = StringIO()&amp;#10;#df.to_csv(csv_buf, header=True, index=False)&amp;#10;#csv_buf.seek(0)&amp;#10;filename = 'FixatedLocations' + expInfo['participant'] + '.txt'&amp;#10;key2 = 'PsychoPy/' + filename&amp;#10;s3.put_object(Bucket='kirkpatricklab', Body=open('FixatedLocations.txt','rb'),&amp;#10;             Key=key2)&amp;#10;#s3.Bucket('kirkpatricklab').upload_file('FixatedLocations.txt','PsychoPy/FixatedLocations.txt')&amp;#10;#s3.Object('kirkpatricklab','FixatedLocations.txt').put(Body=open('FixatedLocations.txt','rb'))&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="text_input">
      <CodeComponent name="code_4">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="modify = false;&amp;#10;text.text = &quot;&quot;;&amp;#10;event.clearEvents(&quot;keyboard&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="modify = False&amp;#10;text.text = ''&amp;#10;event.clearEvents('keyboard')" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if int(EndOfStory) == 1:&amp;#10;    continueRoutine = True&amp;#10;else:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;&amp;#10;keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'space' in keys:&amp;#10;        text.text = text.text + ' '&amp;#10;    elif 'backspace' in keys:&amp;#10;        text.text = text.text[:-1]&amp;#10;    elif 'period' in keys:&amp;#10;        text.text = text.text + '.'&amp;#10;    elif 'comma' in keys:&amp;#10;        text.text = text.text + ','&amp;#10;    elif 'apostrophe' in keys:&amp;#10;        text.text = text.text + '\''&amp;#10;    elif 'lshift' in keys or 'rshift' in keys:&amp;#10;        modify = True&amp;#10;    elif 'return' in keys:&amp;#10;        continueRoutine = False&amp;#10;    else:&amp;#10;        if modify:&amp;#10;            text.text = text.text + keys[0].upper()&amp;#10;            modify = False&amp;#10;        else:&amp;#10;            text.text = text.text + keys[0]" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((Number.parseInt(EndOfStory) === 1)) {&amp;#10;    continueRoutine = true;&amp;#10;} else {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        text.text = (text.text + &quot; &quot;);&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            text.text = text.text.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;period&quot;, keys)) {&amp;#10;                text.text = (text.text + &quot;.&quot;);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;comma&quot;, keys)) {&amp;#10;                    text.text = (text.text + &quot;,&quot;);&amp;#10;                } else {&amp;#10;                    if ((_pj.in_es6(&quot;lshift&quot;, keys) || _pj.in_es6(&quot;rshift&quot;, keys))) {&amp;#10;                        modify = true;&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;return&quot;, keys)) {&amp;#10;                            continueRoutine = false;&amp;#10;                        } else {&amp;#10;                            if (modify) {&amp;#10;                                text.text = (text.text + keys[0].upper());&amp;#10;                                modify = false;&amp;#10;                            } else {&amp;#10;                                text.text = (text.text + keys[0]);&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text.text);&amp;#10;if ((Number.parseInt(EndOfStory) === 1)) {&amp;#10;    outfile = open(&quot;FixatedLocations.txt&quot;, &quot;a&quot;);&amp;#10;    outfile.write(&quot;\n SUMMARY: \n&quot;);&amp;#10;    outfile.write(text.text);&amp;#10;    outfile.write(&quot;\n Begin next story... \n&quot;);&amp;#10;    outfile.close();&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData(&quot;typedWord&quot;, text.text)&amp;#10;&amp;#10;if int(EndOfStory) == 1:&amp;#10;    outfile = open('FixatedLocations.txt','a')&amp;#10;    outfile.write('\n SUMMARY: \n')&amp;#10;    outfile.write(text.text)&amp;#10;    outfile.write('\n Begin next story... \n')&amp;#10;    outfile.close()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Times New Roman" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Type your understanding of the story below. &amp;#10;Press [Enter] when you are done." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Times New Roman" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.035" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Informed_Consent"/>
  </Routines>
  <Flow>
    <Routine name="Informed_Consent"/>
    <Routine name="Instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('OriginalImage', 'images/01001.bmp'), ('BlurredImage', 'images/blurred01001.bmp')]), OrderedDict([('OriginalImage', 'images/01002.bmp'), ('BlurredImage', 'images/blurred01002.bmp')]), OrderedDict([('OriginalImage', 'images/01003.bmp'), ('BlurredImage', 'images/blurred01003.bmp')]), OrderedDict([('OriginalImage', 'images/01004.bmp'), ('BlurredImage', 'images/blurred01004.bmp')]), OrderedDict([('OriginalImage', 'images/01005.bmp'), ('BlurredImage', 'images/blurred01005.bmp')]), OrderedDict([('OriginalImage', 'images/01006.bmp'), ('BlurredImage', 'images/blurred01006.bmp')]), OrderedDict([('OriginalImage', 'images/01007.bmp'), ('BlurredImage', 'images/blurred01007.bmp')]), OrderedDict([('OriginalImage', 'images/01008.bmp'), ('BlurredImage', 'images/blurred01008.bmp')]), OrderedDict([('OriginalImage', 'images/01009.bmp'), ('BlurredImage', 'images/blurred01009.bmp')]), OrderedDict([('OriginalImage', 'images/01010.bmp'), ('BlurredImage', 'images/blurred01010.bmp')]), OrderedDict([('OriginalImage', 'images/01011.bmp'), ('BlurredImage', 'images/blurred01011.bmp')]), OrderedDict([('OriginalImage', 'images/01012.bmp'), ('BlurredImage', 'images/blurred01012.bmp')]), OrderedDict([('OriginalImage', 'images/01013.bmp'), ('BlurredImage', 'images/blurred01013.bmp')]), OrderedDict([('OriginalImage', 'images/01014.bmp'), ('BlurredImage', 'images/blurred01014.bmp')]), OrderedDict([('OriginalImage', 'images/01015.bmp'), ('BlurredImage', 'images/blurred01015.bmp')]), OrderedDict([('OriginalImage', 'images/01016.bmp'), ('BlurredImage', 'images/blurred01016.bmp')]), OrderedDict([('OriginalImage', 'images/01017.bmp'), ('BlurredImage', 'images/blurred01017.bmp')]), OrderedDict([('OriginalImage', 'images/01018.bmp'), ('BlurredImage', 'images/blurred01018.bmp')]), OrderedDict([('OriginalImage', 'images/01019.bmp'), ('BlurredImage', 'images/blurred01019.bmp')]), OrderedDict([('OriginalImage', 'images/01020.bmp'), ('BlurredImage', 'images/blurred01020.bmp')]), OrderedDict([('OriginalImage', 'images/01021.bmp'), ('BlurredImage', 'images/blurred01021.bmp')]), OrderedDict([('OriginalImage', 'images/01022.bmp'), ('BlurredImage', 'images/blurred01022.bmp')]), OrderedDict([('OriginalImage', 'images/01023.bmp'), ('BlurredImage', 'images/blurred01023.bmp')]), OrderedDict([('OriginalImage', 'images/01024.bmp'), ('BlurredImage', 'images/blurred01024.bmp')]), OrderedDict([('OriginalImage', 'images/01025.bmp'), ('BlurredImage', 'images/blurred01025.bmp')]), OrderedDict([('OriginalImage', 'images/01026.bmp'), ('BlurredImage', 'images/blurred01026.bmp')]), OrderedDict([('OriginalImage', 'images/02001.bmp'), ('BlurredImage', 'images/blurred02001.bmp')]), OrderedDict([('OriginalImage', 'images/02002.bmp'), ('BlurredImage', 'images/blurred02002.bmp')]), OrderedDict([('OriginalImage', 'images/02003.bmp'), ('BlurredImage', 'images/blurred02003.bmp')]), OrderedDict([('OriginalImage', 'images/02004.bmp'), ('BlurredImage', 'images/blurred02004.bmp')]), OrderedDict([('OriginalImage', 'images/02005.bmp'), ('BlurredImage', 'images/blurred02005.bmp')]), OrderedDict([('OriginalImage', 'images/02006.bmp'), ('BlurredImage', 'images/blurred02006.bmp')]), OrderedDict([('OriginalImage', 'images/02007.bmp'), ('BlurredImage', 'images/blurred02007.bmp')]), OrderedDict([('OriginalImage', 'images/02008.bmp'), ('BlurredImage', 'images/blurred02008.bmp')]), OrderedDict([('OriginalImage', 'images/02009.bmp'), ('BlurredImage', 'images/blurred02009.bmp')]), OrderedDict([('OriginalImage', 'images/02010.bmp'), ('BlurredImage', 'images/blurred02010.bmp')]), OrderedDict([('OriginalImage', 'images/02011.bmp'), ('BlurredImage', 'images/blurred02011.bmp')]), OrderedDict([('OriginalImage', 'images/02012.bmp'), ('BlurredImage', 'images/blurred02012.bmp')]), OrderedDict([('OriginalImage', 'images/02013.bmp'), ('BlurredImage', 'images/blurred02013.bmp')]), OrderedDict([('OriginalImage', 'images/02014.bmp'), ('BlurredImage', 'images/blurred02014.bmp')]), OrderedDict([('OriginalImage', 'images/02015.bmp'), ('BlurredImage', 'images/blurred02015.bmp')]), OrderedDict([('OriginalImage', 'images/02016.bmp'), ('BlurredImage', 'images/blurred02016.bmp')]), OrderedDict([('OriginalImage', 'images/02017.bmp'), ('BlurredImage', 'images/blurred02017.bmp')]), OrderedDict([('OriginalImage', 'images/02018.bmp'), ('BlurredImage', 'images/blurred02018.bmp')]), OrderedDict([('OriginalImage', 'images/02019.bmp'), ('BlurredImage', 'images/blurred02019.bmp')]), OrderedDict([('OriginalImage', 'images/02020.bmp'), ('BlurredImage', 'images/blurred02020.bmp')]), OrderedDict([('OriginalImage', 'images/02021.bmp'), ('BlurredImage', 'images/blurred02021.bmp')]), OrderedDict([('OriginalImage', 'images/02022.bmp'), ('BlurredImage', 'images/blurred02022.bmp')]), OrderedDict([('OriginalImage', 'images/02023.bmp'), ('BlurredImage', 'images/blurred02023.bmp')]), OrderedDict([('OriginalImage', 'images/02024.bmp'), ('BlurredImage', 'images/blurred02024.bmp')]), OrderedDict([('OriginalImage', 'images/02025.bmp'), ('BlurredImage', 'images/blurred02025.bmp')]), OrderedDict([('OriginalImage', 'images/02026.bmp'), ('BlurredImage', 'images/blurred02026.bmp')]), OrderedDict([('OriginalImage', 'images/03001.bmp'), ('BlurredImage', 'images/blurred03001.bmp')]), OrderedDict([('OriginalImage', 'images/03002.bmp'), ('BlurredImage', 'images/blurred03002.bmp')]), OrderedDict([('OriginalImage', 'images/03003.bmp'), ('BlurredImage', 'images/blurred03003.bmp')]), OrderedDict([('OriginalImage', 'images/03004.bmp'), ('BlurredImage', 'images/blurred03004.bmp')]), OrderedDict([('OriginalImage', 'images/03005.bmp'), ('BlurredImage', 'images/blurred03005.bmp')]), OrderedDict([('OriginalImage', 'images/03006.bmp'), ('BlurredImage', 'images/blurred03006.bmp')]), OrderedDict([('OriginalImage', 'images/03007.bmp'), ('BlurredImage', 'images/blurred03007.bmp')]), OrderedDict([('OriginalImage', 'images/03008.bmp'), ('BlurredImage', 'images/blurred03008.bmp')]), OrderedDict([('OriginalImage', 'images/03009.bmp'), ('BlurredImage', 'images/blurred03009.bmp')]), OrderedDict([('OriginalImage', 'images/03010.bmp'), ('BlurredImage', 'images/blurred03010.bmp')]), OrderedDict([('OriginalImage', 'images/03011.bmp'), ('BlurredImage', 'images/blurred03011.bmp')]), OrderedDict([('OriginalImage', 'images/03012.bmp'), ('BlurredImage', 'images/blurred03012.bmp')]), OrderedDict([('OriginalImage', 'images/03013.bmp'), ('BlurredImage', 'images/blurred03013.bmp')]), OrderedDict([('OriginalImage', 'images/03014.bmp'), ('BlurredImage', 'images/blurred03014.bmp')]), OrderedDict([('OriginalImage', 'images/03015.bmp'), ('BlurredImage', 'images/blurred03015.bmp')]), OrderedDict([('OriginalImage', 'images/03016.bmp'), ('BlurredImage', 'images/blurred03016.bmp')]), OrderedDict([('OriginalImage', 'images/03017.bmp'), ('BlurredImage', 'images/blurred03017.bmp')]), OrderedDict([('OriginalImage', 'images/03018.bmp'), ('BlurredImage', 'images/blurred03018.bmp')]), OrderedDict([('OriginalImage', 'images/03019.bmp'), ('BlurredImage', 'images/blurred03019.bmp')]), OrderedDict([('OriginalImage', 'images/03020.bmp'), ('BlurredImage', 'images/blurred03020.bmp')]), OrderedDict([('OriginalImage', 'images/03021.bmp'), ('BlurredImage', 'images/blurred03021.bmp')]), OrderedDict([('OriginalImage', 'images/03022.bmp'), ('BlurredImage', 'images/blurred03022.bmp')]), OrderedDict([('OriginalImage', 'images/03023.bmp'), ('BlurredImage', 'images/blurred03023.bmp')]), OrderedDict([('OriginalImage', 'images/03024.bmp'), ('BlurredImage', 'images/blurred03024.bmp')]), OrderedDict([('OriginalImage', 'images/03025.bmp'), ('BlurredImage', 'images/blurred03025.bmp')]), OrderedDict([('OriginalImage', 'images/03026.bmp'), ('BlurredImage', 'images/blurred03026.bmp')]), OrderedDict([('OriginalImage', 'images/04001.bmp'), ('BlurredImage', 'images/blurred04001.bmp')]), OrderedDict([('OriginalImage', 'images/04002.bmp'), ('BlurredImage', 'images/blurred04002.bmp')]), OrderedDict([('OriginalImage', 'images/04003.bmp'), ('BlurredImage', 'images/blurred04003.bmp')]), OrderedDict([('OriginalImage', 'images/04004.bmp'), ('BlurredImage', 'images/blurred04004.bmp')]), OrderedDict([('OriginalImage', 'images/04005.bmp'), ('BlurredImage', 'images/blurred04005.bmp')]), OrderedDict([('OriginalImage', 'images/04006.bmp'), ('BlurredImage', 'images/blurred04006.bmp')]), OrderedDict([('OriginalImage', 'images/04007.bmp'), ('BlurredImage', 'images/blurred04007.bmp')]), OrderedDict([('OriginalImage', 'images/04008.bmp'), ('BlurredImage', 'images/blurred04008.bmp')]), OrderedDict([('OriginalImage', 'images/04009.bmp'), ('BlurredImage', 'images/blurred04009.bmp')]), OrderedDict([('OriginalImage', 'images/04010.bmp'), ('BlurredImage', 'images/blurred04010.bmp')]), OrderedDict([('OriginalImage', 'images/04011.bmp'), ('BlurredImage', 'images/blurred04011.bmp')]), OrderedDict([('OriginalImage', 'images/04012.bmp'), ('BlurredImage', 'images/blurred04012.bmp')]), OrderedDict([('OriginalImage', 'images/04013.bmp'), ('BlurredImage', 'images/blurred04013.bmp')]), OrderedDict([('OriginalImage', 'images/04014.bmp'), ('BlurredImage', 'images/blurred04014.bmp')]), OrderedDict([('OriginalImage', 'images/04015.bmp'), ('BlurredImage', 'images/blurred04015.bmp')]), OrderedDict([('OriginalImage', 'images/04016.bmp'), ('BlurredImage', 'images/blurred04016.bmp')]), OrderedDict([('OriginalImage', 'images/04017.bmp'), ('BlurredImage', 'images/blurred04017.bmp')]), OrderedDict([('OriginalImage', 'images/04018.bmp'), ('BlurredImage', 'images/blurred04018.bmp')]), OrderedDict([('OriginalImage', 'images/04019.bmp'), ('BlurredImage', 'images/blurred04019.bmp')]), OrderedDict([('OriginalImage', 'images/04020.bmp'), ('BlurredImage', 'images/blurred04020.bmp')]), OrderedDict([('OriginalImage', 'images/04021.bmp'), ('BlurredImage', 'images/blurred04021.bmp')]), OrderedDict([('OriginalImage', 'images/04022.bmp'), ('BlurredImage', 'images/blurred04022.bmp')]), OrderedDict([('OriginalImage', 'images/04023.bmp'), ('BlurredImage', 'images/blurred04023.bmp')]), OrderedDict([('OriginalImage', 'images/04024.bmp'), ('BlurredImage', 'images/blurred04024.bmp')]), OrderedDict([('OriginalImage', 'images/05001.bmp'), ('BlurredImage', 'images/blurred05001.bmp')]), OrderedDict([('OriginalImage', 'images/05002.bmp'), ('BlurredImage', 'images/blurred05002.bmp')]), OrderedDict([('OriginalImage', 'images/05003.bmp'), ('BlurredImage', 'images/blurred05003.bmp')]), OrderedDict([('OriginalImage', 'images/05004.bmp'), ('BlurredImage', 'images/blurred05004.bmp')]), OrderedDict([('OriginalImage', 'images/05005.bmp'), ('BlurredImage', 'images/blurred05005.bmp')]), OrderedDict([('OriginalImage', 'images/05006.bmp'), ('BlurredImage', 'images/blurred05006.bmp')]), OrderedDict([('OriginalImage', 'images/05007.bmp'), ('BlurredImage', 'images/blurred05007.bmp')]), OrderedDict([('OriginalImage', 'images/05008.bmp'), ('BlurredImage', 'images/blurred05008.bmp')]), OrderedDict([('OriginalImage', 'images/05009.bmp'), ('BlurredImage', 'images/blurred05009.bmp')]), OrderedDict([('OriginalImage', 'images/05010.bmp'), ('BlurredImage', 'images/blurred05010.bmp')]), OrderedDict([('OriginalImage', 'images/05011.bmp'), ('BlurredImage', 'images/blurred05011.bmp')]), OrderedDict([('OriginalImage', 'images/05012.bmp'), ('BlurredImage', 'images/blurred05012.bmp')]), OrderedDict([('OriginalImage', 'images/05013.bmp'), ('BlurredImage', 'images/blurred05013.bmp')]), OrderedDict([('OriginalImage', 'images/05014.bmp'), ('BlurredImage', 'images/blurred05014.bmp')]), OrderedDict([('OriginalImage', 'images/05015.bmp'), ('BlurredImage', 'images/blurred05015.bmp')]), OrderedDict([('OriginalImage', 'images/05016.bmp'), ('BlurredImage', 'images/blurred05016.bmp')]), OrderedDict([('OriginalImage', 'images/05017.bmp'), ('BlurredImage', 'images/blurred05017.bmp')]), OrderedDict([('OriginalImage', 'images/05018.bmp'), ('BlurredImage', 'images/blurred05018.bmp')]), OrderedDict([('OriginalImage', 'images/05019.bmp'), ('BlurredImage', 'images/blurred05019.bmp')]), OrderedDict([('OriginalImage', 'images/05020.bmp'), ('BlurredImage', 'images/blurred05020.bmp')]), OrderedDict([('OriginalImage', 'images/05021.bmp'), ('BlurredImage', 'images/blurred05021.bmp')]), OrderedDict([('OriginalImage', 'images/05022.bmp'), ('BlurredImage', 'images/blurred05022.bmp')]), OrderedDict([('OriginalImage', 'images/05023.bmp'), ('BlurredImage', 'images/blurred05023.bmp')]), OrderedDict([('OriginalImage', 'images/05024.bmp'), ('BlurredImage', 'images/blurred05024.bmp')]), OrderedDict([('OriginalImage', 'images/05025.bmp'), ('BlurredImage', 'images/blurred05025.bmp')]), OrderedDict([('OriginalImage', 'images/06001.bmp'), ('BlurredImage', 'images/blurred06001.bmp')]), OrderedDict([('OriginalImage', 'images/06002.bmp'), ('BlurredImage', 'images/blurred06002.bmp')]), OrderedDict([('OriginalImage', 'images/06003.bmp'), ('BlurredImage', 'images/blurred06003.bmp')]), OrderedDict([('OriginalImage', 'images/06004.bmp'), ('BlurredImage', 'images/blurred06004.bmp')]), OrderedDict([('OriginalImage', 'images/06005.bmp'), ('BlurredImage', 'images/blurred06005.bmp')]), OrderedDict([('OriginalImage', 'images/06006.bmp'), ('BlurredImage', 'images/blurred06006.bmp')]), OrderedDict([('OriginalImage', 'images/06007.bmp'), ('BlurredImage', 'images/blurred06007.bmp')]), OrderedDict([('OriginalImage', 'images/06008.bmp'), ('BlurredImage', 'images/blurred06008.bmp')]), OrderedDict([('OriginalImage', 'images/06009.bmp'), ('BlurredImage', 'images/blurred06009.bmp')]), OrderedDict([('OriginalImage', 'images/06010.bmp'), ('BlurredImage', 'images/blurred06010.bmp')]), OrderedDict([('OriginalImage', 'images/06011.bmp'), ('BlurredImage', 'images/blurred06011.bmp')]), OrderedDict([('OriginalImage', 'images/06012.bmp'), ('BlurredImage', 'images/blurred06012.bmp')]), OrderedDict([('OriginalImage', 'images/06013.bmp'), ('BlurredImage', 'images/blurred06013.bmp')]), OrderedDict([('OriginalImage', 'images/06014.bmp'), ('BlurredImage', 'images/blurred06014.bmp')]), OrderedDict([('OriginalImage', 'images/06015.bmp'), ('BlurredImage', 'images/blurred06015.bmp')]), OrderedDict([('OriginalImage', 'images/06016.bmp'), ('BlurredImage', 'images/blurred06016.bmp')]), OrderedDict([('OriginalImage', 'images/06017.bmp'), ('BlurredImage', 'images/blurred06017.bmp')]), OrderedDict([('OriginalImage', 'images/06018.bmp'), ('BlurredImage', 'images/blurred06018.bmp')]), OrderedDict([('OriginalImage', 'images/06019.bmp'), ('BlurredImage', 'images/blurred06019.bmp')]), OrderedDict([('OriginalImage', 'images/06020.bmp'), ('BlurredImage', 'images/blurred06020.bmp')]), OrderedDict([('OriginalImage', 'images/06021.bmp'), ('BlurredImage', 'images/blurred06021.bmp')]), OrderedDict([('OriginalImage', 'images/06022.bmp'), ('BlurredImage', 'images/blurred06022.bmp')]), OrderedDict([('OriginalImage', 'images/06023.bmp'), ('BlurredImage', 'images/blurred06023.bmp')]), OrderedDict([('OriginalImage', 'images/06024.bmp'), ('BlurredImage', 'images/blurred06024.bmp')]), OrderedDict([('OriginalImage', 'images/06025.bmp'), ('BlurredImage', 'images/blurred06025.bmp')]), OrderedDict([('OriginalImage', 'images/06026.bmp'), ('BlurredImage', 'images/blurred06026.bmp')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="ImageList.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <Routine name="text_input"/>
    <LoopTerminator name="trials"/>
    <Routine name="End"/>
  </Flow>
</PsychoPy2experiment>
